#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤.
"""

import os
import re

def analyze_javascript_modules():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç JavaScript –º–æ–¥—É–ª–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîç –ê–ù–ê–õ–ò–ó JAVASCRIPT –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    js_modules_dir = "js_modules"
    if not os.path.exists(js_modules_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {js_modules_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ú–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    positioning_modules = [
        'position.js',
        'drag_drop.js', 
        'core.js',
        'block_positioning.js'
    ]
    
    found_issues = []
    
    for module_name in positioning_modules:
        module_path = os.path.join(js_modules_dir, module_name)
        
        if os.path.exists(module_path):
            print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑ {module_name}:")
            with open(module_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            positioning_functions = re.findall(r'function\s+(\w*[Pp]osition\w*)', content)
            if positioning_functions:
                print(f"  –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {positioning_functions}")
            
            # –ò—â–µ–º updateActivityPositions
            if 'updateActivityPositions' in content:
                print(f"  ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç updateActivityPositions")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                update_match = re.search(r'function updateActivityPositions.*?(?=\n\s*function|\n\s*$)', content, re.DOTALL)
                if update_match:
                    func_content = update_match.group(0)
                    print(f"  –î–ª–∏–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {len(func_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                    if 'left:' in func_content or 'style.left' in func_content:
                        print(f"  ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç left –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!")
                        found_issues.append(f"{module_name}: –∏–∑–º–µ–Ω—è–µ—Ç left –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ DOMContentLoaded
            if 'DOMContentLoaded' in content:
                print(f"  üìã –ò–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ DOMContentLoaded")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                dom_match = re.search(r"addEventListener\s*\(\s*['\"]DOMContentLoaded['\"].*?\}\s*\)", content, re.DOTALL)
                if dom_match:
                    dom_content = dom_match.group(0)
                    if 'updateActivityPositions' in dom_content:
                        print(f"  ‚ö†Ô∏è  updateActivityPositions –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!")
                        found_issues.append(f"{module_name}: updateActivityPositions –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
            
            # –ò—â–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            compensation_patterns = [
                r'compensationFactor',
                r'compensationExponent', 
                r'borderWidth.*compensation',
                r'gridCellHeight.*compensation'
            ]
            
            for pattern in compensation_patterns:
                if re.search(pattern, content):
                    print(f"  üîß –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: {pattern}")
                    found_issues.append(f"{module_name}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é - {pattern}")
        
        else:
            print(f"‚ùå {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
    if found_issues:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in found_issues:
            print(f"  - {issue}")
    else:
        print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    return found_issues

def check_html_javascript_generation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é JavaScript –≤ HTML."""
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò JAVASCRIPT")
    print("=" * 50)
    
    try:
        from html_javascript import get_javascript
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        cellHeight = 15
        dayCellWidth = 100  
        headerHeight = 45
        days_order = ["Mo", "Di", "Mi", "Do", "Fr", "Sa"]
        time_interval = 5
        borderWidth = 0.5
        
        js_code = get_javascript(cellHeight, dayCellWidth, headerHeight, days_order, time_interval, borderWidth)
        
        print(f"–†–∞–∑–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JavaScript: {len(js_code)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        variables_to_check = [
            ('gridCellHeight', str(cellHeight)),
            ('dayCellWidth', str(dayCellWidth)),
            ('headerHeight', str(headerHeight)),
            ('timeInterval', str(time_interval)),
            ('borderWidth', str(borderWidth))
        ]
        
        for var_name, expected_value in variables_to_check:
            pattern = f'var {var_name} = {expected_value}'
            if pattern in js_code:
                print(f"  ‚úÖ {var_name} = {expected_value}")
            else:
                print(f"  ‚ùå {var_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                
                # –ò—â–µ–º —á—Ç–æ —Ç–∞–º –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ
                actual_match = re.search(f'var {var_name} = ([^;]+)', js_code)
                if actual_match:
                    actual_value = actual_match.group(1)
                    print(f"    –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {actual_value}")
        
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        init_functions = [
            'initDragAndDrop',
            'updateActivityPositions',
            'initBlockEditing'
        ]
        
        for func_name in init_functions:
            if func_name in js_code:
                print(f"  ‚úÖ {func_name}() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
            else:
                print(f"  ‚ùå {func_name}() –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ JavaScript: {e}")

def create_minimal_test_html():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTML –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print(f"\nüîç –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê")
    print("=" * 50)
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTML —Å –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º
    html_content = """<!DOCTYPE html>
<html lang='ru'>
<head>
    <meta charset="UTF-8">
    <style>
        .schedule-container { position: relative; width: 500px; border: 2px solid red; }
        .schedule-grid { border-collapse: collapse; }
        .schedule-grid th, .schedule-grid td { 
            border: 1px solid #ddd; 
            width: 100px; height: 15px; 
            text-align: center; 
        }
        .time-cell { width: 80px; background: #f0f0f0; }
        .activity-block { 
            position: absolute; 
            background: #FFD700; 
            border: 1px solid #000;
            padding: 2px;
            font-size: 10px;
        }
    </style>
</head>
<body>
    <h1>–¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
    <div class="schedule-container">
        <table class="schedule-grid">
            <thead>
                <tr>
                    <th class="time-cell">–í—Ä–µ–º—è</th>
                    <th class="day-Mo">Mo<br>.01</th>
                    <th class="day-Mo">Mo<br>.02</th>
                </tr>
            </thead>
            <tbody>
                <tr><td class="time-cell">09:00</td><td></td><td></td></tr>
                <tr><td class="time-cell"></td><td></td><td></td></tr>
                <tr><td class="time-cell"></td><td></td><td></td></tr>
            </tbody>
        </table>
        
        <!-- –ë–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ left: 80px (–ø–æ—Å–ª–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏) -->
        <div class='activity-block' style='top:45px; left:80px; width:100px; height:45px;'>
            –¢–µ—Å—Ç 1<br>col=0
        </div>
        
        <!-- –ë–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ left: 180px (–ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞) -->
        <div class='activity-block' style='top:45px; left:180px; width:100px; height:45px;'>
            –¢–µ—Å—Ç 2<br>col=1  
        </div>
    </div>
    
    <p>–ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ - –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</p>
    <p>–ë–ª–æ–∫ 1 (–∂–µ–ª—Ç—ã–π) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ</p>
    <p>–ë–ª–æ–∫ 2 (–∂–µ–ª—Ç—ã–π) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ</p>
</body>
</html>"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = "test_positioning.html"
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    print(f"–û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    return test_file

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JavaScript."""
    issues = analyze_javascript_modules()
    check_html_javascript_generation()
    test_file = create_minimal_test_html()
    
    print(f"\n" + "=" * 60)
    print(f"üí° –í–´–í–û–î–´:")
    
    if issues:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ JavaScript:")
        for issue in issues:
            print(f"  - {issue}")
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ updateActivityPositions() - –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –±–ª–æ–∫–∏")
        print(f"2. –û—Ç–∫–ª—é—á–∏—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ")
        print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ JavaScript –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    else:
        print(f"‚úÖ JavaScript –º–æ–¥—É–ª–∏ –≤—ã–≥–ª—è–¥—è—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        print(f"üîß –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print(f"1. CSS —Å—Ç–∏–ª—è—Ö")
        print(f"2. –°—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö") 
        print(f"3. –î—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print(f"\nüìã –î–ê–õ–¨–ù–ï–ô–®–ò–ï –®–ê–ì–ò:")
    print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ {test_file} –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print(f"2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ debug_main.py –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å main.py")
    print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ JavaScript")

if __name__ == "__main__":
    main()
    